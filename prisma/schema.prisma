// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// CORE USER & AUTH MODELS
// =============================================

model User {
  id              String           @id @default(cuid())
  name            String
  phone           String?
  email           String           @unique
  address         String?
  profile         String?
  isVerified      Boolean          @default(false)
  role            Role             @default(USER)
  isGoogle        Boolean          @default(false)
  status          UserStatus       @default(Active)
  lastActiveAt    DateTime         @default(now())

  // Relations
  socialMedia     UserSocialMedia?
  posts           Post[]           @relation(name: "PostAuthor")
  series          Series[] @relation(name: "PostAuthor")
  likedPosts      PostLike[]
  comments        Comment[]
  savedPosts      SavedPost[]
  
  // Follower system
  followers       Follow[]         @relation("Followee")
  following       Follow[]         @relation("Follower")
  
  // Authentication
  auth            Auth?
  
  // Messaging
  sentMessages        PrivateMessage[]     @relation("MessageSender")
  receivedMessages    PrivateMessage[]     @relation("MessageReceiver")
  messageStatuses     PrivateMessageStatus[]
  conversations       ConversationMember[]
  
  // Notifications & Activity
  sentNotifications   Notification[]       @relation("NotificationSender")
  receivedNotifications Notification[]     @relation("NotificationReceiver")
  activities          RecentActivity[]
  
  // Reports
  reportsMade     Report[]         @relation("Reporter")
  reportsReceived Report[]         @relation("ReportedUser")
  
  // Analytics
  userStats       UserStats?
  monthlyStats    UserMonthlyStats[]
  growthStats     UserGrowthStats[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Indexes for performance
  @@index([email])
  @@index([status])
  @@index([lastActiveAt])
  @@index([createdAt])
}

model Auth {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id              String           @id @default(cuid())
  followerId      String
  followeeId      String
  
  follower        User             @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee        User             @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
  @@index([createdAt])
}

model UserSocialMedia {
  id              String           @id @default(cuid())
  userId          String           @unique
  facebook        String?
  youtube         String?
  twitter         String?
  instagram       String?
  pinterest       String?
  linkedin        String?
  tiktok          String?

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// =============================================
// BLOG CONTENT MODELS
// =============================================

model Post {
  id              String           @id @default(cuid())
  slug            String           @unique
  title           String
  content         Json
  excerpt         String?          // For SEO and previews
  thumbnail       String?
  audioUrl        String?
  
  authorId        String
  author          User             @relation(name: "PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  seriesId        String?
  series          Series?          @relation(fields: [seriesId], references: [id])
  seriesOrder     Int?             // Order within series
  
  categories      PostCategory[]
  tags            PostTag[]
  
  // Engagement
  likes           PostLike[]
  comments        Comment[]
  saves           SavedPost[]
  
  // Analytics
  viewsCount      Int              @default(0)
  likeCount       Int              @default(0)
  commentCount    Int              @default(0)
  shareCount      Int              @default(0)
  
  // Status & Publishing
  status          PostStatus       @default(DRAFT)
  publishedAt     DateTime?
  scheduledAt     DateTime?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Reports
  reports         Report[]         @relation("ReportedPost")
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([authorId])
  @@index([seriesId])
  @@index([status])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([likeCount])
  @@index([viewsCount])
  @@index([slug])
}

model Series {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  description     String?
  thumbnail       String?
  authorId        String
  author          User             @relation(name: "PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  posts           Post[]
  postsCount      Int              @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([slug])
  @@index([createdAt])
}

model Category {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  description     String?
  color           String?          // For UI theming
  
  posts           PostCategory[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([slug])
}

model Tag {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  
  posts           PostTag[]
  usageCount      Int              @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([slug])
  @@index([usageCount])
}

// Junction tables for many-to-many relationships
model PostCategory {
  postId          String
  categoryId      String
  
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model PostTag {
  postId          String
  tagId           String
  
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag             Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// =============================================
// ENGAGEMENT MODELS
// =============================================

model PostLike {
  id              String           @id @default(cuid())
  userId          String
  postId          String
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())

  @@unique([userId, postId])
  @@index([postId])
  @@index([createdAt])
}

model Comment {
  id              String           @id @default(cuid())
  content         String
  
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId          String
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  parentId        String?
  parent          Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[]        @relation("CommentReplies")
  
  likeCount       Int              @default(0)
  replyCount      Int              @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

model SavedPost {
  id              String           @id @default(cuid())
  userId          String
  postId          String
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([createdAt])
}

// =============================================
// NOTIFICATION SYSTEM
// =============================================

model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  title           String
  content         String?
  
  senderId        String?          // Optional: who triggered the notification
  sender          User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  
  receiverId      String
  receiver        User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Related entities
  postId          String?
  commentId       String?
  followId        String?
  
  // Metadata
  data            Json?            // Additional data as needed
  
  // Status
  isRead          Boolean          @default(false)
  readAt          DateTime?
  
  createdAt       DateTime         @default(now())

  @@index([receiverId, isRead])
  @@index([receiverId, createdAt])
  @@index([type])
  @@index([createdAt])
}

// =============================================
// RECENT ACTIVITY TRACKING
// =============================================

model RecentActivity {
  id              String           @id @default(cuid())
  type            ActivityType
  description     String
  
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Related entities
  targetId        String?          // ID of the target entity (post, user, etc.)
  targetType      String?          // Type of target entity
  
  // Metadata
  metadata        Json?            // Additional activity data
  
  createdAt       DateTime         @default(now())

  @@index([userId, createdAt])
  @@index([type])
  @@index([createdAt])
}

// =============================================
// MESSAGING SYSTEM
// =============================================

model Conversation {
  id              String           @id @default(cuid())
  type            ConversationType @default(DIRECT)
  name            String?          // For group conversations
  
  members         ConversationMember[]
  messages        PrivateMessage[]
  
  lastMessageAt   DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([lastMessageAt])
  @@index([createdAt])
}

model ConversationMember {
  id              String           @id @default(cuid())
  conversationId  String
  userId          String
  
  conversation    Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt        DateTime         @default(now())
  leftAt          DateTime?

  @@unique([conversationId, userId])
  @@index([userId])
}

model PrivateMessage {
  id              String           @id @default(cuid())
  content         String
  
  conversationId  String
  conversation    Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId        String
  sender          User             @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId      String?
  receiver        User?            @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)
  
  fileUrl         String?
  fileType        String?
  
  statuses        PrivateMessageStatus[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([receiverId])
}

model PrivateMessageStatus {
  id              String           @id @default(cuid())
  messageId       String
  userId          String
  status          MessageStatus
  
  message         PrivateMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  updatedAt       DateTime         @updatedAt

  @@unique([messageId, userId])
}

// =============================================
// ANALYTICS & STATS
// =============================================

model UserStats {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  totalPosts      Int              @default(0)
  totalViews      Int              @default(0)
  totalLikes      Int              @default(0)
  totalComments   Int              @default(0)
  totalFollowers  Int              @default(0)
  totalFollowing  Int              @default(0)
  
  engagementRate  Float            @default(0.0)
  avgViewsPerPost Float            @default(0.0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model UserMonthlyStats {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  year            Int
  month           Int
  
  postsCount      Int              @default(0)
  viewsCount      Int              @default(0)
  likesCount      Int              @default(0)
  commentsCount   Int              @default(0)
  followersGained Int              @default(0)
  
  engagementRate  Float            @default(0.0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, year, month])
  @@index([userId, year, month])
}

model UserGrowthStats {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date            DateTime         @db.Date
  
  followersCount  Int
  followingCount  Int
  postsCount      Int
  totalViews      Int
  totalLikes      Int
  
  createdAt       DateTime         @default(now())

  @@unique([userId, date])
  @@index([userId, date])
}

// =============================================
// REPORTING SYSTEM
// =============================================

model Report {
  id              String           @id @default(cuid())
  type            ReportType
  reason          String
  description     String?
  
  reporterId      String
  reporter        User             @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  
  // Target can be user or post
  reportedUserId  String?
  reportedUser    User?            @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  
  reportedPostId  String?
  reportedPost    Post?            @relation("ReportedPost", fields: [reportedPostId], references: [id], onDelete: Cascade)
  
  status          ReportStatus     @default(PENDING)
  reviewedAt      DateTime?
  reviewedBy      String?          // Admin user ID
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([status])
  @@index([reporterId])
  @@index([createdAt])
}

// =============================================
// ENUMS
// =============================================

enum Role {
  USER
  WRITER
  ADMIN
  MODERATOR
}

enum UserStatus {
  Active
  Inactive
  Suspended
  Banned
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
  UNDER_REVIEW
  SCHEDULED
}

enum NotificationType {
  NEW_FOLLOWER
  POST_LIKED
  POST_COMMENTED
  POST_SHARED
  COMMENT_REPLIED
  POST_PUBLISHED
  SERIES_UPDATED
  MENTION
  SYSTEM_ANNOUNCEMENT
}

enum ActivityType {
  POST_CREATED
  POST_UPDATED
  POST_PUBLISHED
  POST_LIKED
  POST_COMMENTED
  POST_SHARED
  POST_SAVED
  USER_FOLLOWED
  USER_UNFOLLOWED
  COMMENT_CREATED
  COMMENT_LIKED
  PROFILE_UPDATED
  SERIES_CREATED
  LOGIN
  LOGOUT
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum ReportType {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  FAKE_ACCOUNT
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}